{"version":3,"sources":["../src/utils.js"],"names":["convert","items","parentId","path","result","filter","item","undefined","sort","a","b","index","map","parent","data","forEach","children","id","splice","indexOf","buildTree","buildItem","child","length","tree","flatten","parentIdPropName","indexPropName","indexSeq","pathAsString","join","pop","findDescendants","increaseTreeItem","itemIndex","updateFn","nextSiblingItem","find","siblingItem","newPath","slice","$set","descendants","descendantItem","$splice","decreaseTreeItem","prevSiblingItem","moveTreeItem","sourceIndex","targetIndex","sourceItem","targetItem","dragId","newIndex","hoverDescendants","add","itemData","$push","insert","currentItemAtIndex","currentItemDescendants","newItem","remove"],"mappings":"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","sourcesContent":["import update from 'immutability-helper';\n\n/**\n * Convert the raw item list to the Sortly item list\n * @param {Array} items The raw item list\n * @param {Number|String} parentId The parentId value\n * @param {Array} path The parent path\n * @return {Array}\n */\nexport function convert(\n  items: Array<{ id: number|string, parentId: number|string, index: number }>,\n  parentId: number|string,\n  path: Array<number|string> = [],\n): Array<{ id: number|string, path: Array<number|string> }> {\n  const result = items\n    .filter((item) => {\n      if (parentId === undefined) {\n        return !item.parentId;\n      }\n      return item.parentId === parentId;\n    })\n    .sort((a, b) => a.index - b.index)\n    .map((item) => {\n      const { index, parentId: parent, ...data } = item;\n      return { ...data, path: [...path] };\n    });\n\n  [...result].forEach((item) => {\n    const children = convert(items, item.id, [...path, item.id]);\n    result.splice(result.indexOf(item) + 1, 0, ...children);\n  });\n\n\n  return result;\n}\n\n/**\n * Convert the Sortly item list to the tree struct\n * @param {Array} items The Sortly item list\n * @return {Array}\n */\nexport function buildTree(\n  items: Array<{ id: number|string,\n  path: Array<number|string> }>,\n): Array<{ id: number|string, children: Array<{ id: number|string }> }> {\n  const buildItem = (item) => {\n    const { path, ...data } = item;\n    return {\n      ...data,\n      children: items\n        .filter(child => child.path[child.path.length - 1] === item.id)\n        .map(child => buildItem(child)),\n    };\n  };\n  const tree = items\n    .filter(item => item.path.length === 0)\n    .map(item => buildItem(item));\n\n  return tree;\n}\n\n/**\n * Convert the Sortly item list to the raw item list\n * Useful when you want to convert the item list to store into database\n * @param {Array} items The Sortly item list\n * @param {String} parentIdPropName The parent id property name. Default to \"parentId\"\n * @param {String} indexPropName The index property name. Default to \"index\"\n * @return {Array}\n */\nexport function flatten(\n  items: Array<{ path: Array<number|string> }>,\n  parentIdPropName: string = 'parentId',\n  indexPropName: string = 'index',\n): Array {\n  const indexSeq = {};\n  return items.map((item) => {\n    const { path, ...data } = item;\n    const pathAsString = path.join('.');\n    if (indexSeq[pathAsString] === undefined) {\n      indexSeq[pathAsString] = 0;\n    } else {\n      indexSeq[pathAsString] += 1;\n    }\n    return {\n      ...data, [parentIdPropName]: [...path].pop() || 0, [indexPropName]: indexSeq[pathAsString],\n    };\n  });\n}\n\n/**\n * Find item descendants\n * @param {Array} items The item list\n * @param {Number} index The item position\n * @return {Array.<{path: Array.<number|string>}>}\n */\nexport function findDescendants(items: Array<{ path: Array<number|string> }>, index: number): Array {\n  const { id } = items[index];\n  return items.filter(({ path }) => path.indexOf(id) !== -1);\n}\n\n/**\n * Increase the tree item to 1 level depth\n * @param {Array} items The item list\n * @param {Number} itemIndex The position of the item to increase\n * @return {null|Object}\n */\nexport function increaseTreeItem(items: Array<{ path: Array<number|string> }>, itemIndex: number): Object|null {\n  const updateFn = {};\n  const item = items[itemIndex];\n  const { id } = item;\n\n  // Don't allow to increase if it's root\n  if (item.path.length === 0) {\n    return null;\n  }\n\n  // Can't increase if it have next siblings\n  const nextSiblingItem = items.find((siblingItem, index) =>\n    index > itemIndex && siblingItem.path.join('.') === item.path.join('.'),\n  );\n\n  if (nextSiblingItem) {\n    return null;\n  }\n\n  // It should have the path same as it parent\n  const newPath = item.path.slice(0, -1);\n\n  // update drag item path\n  updateFn[itemIndex] = { path: { $set: newPath } };\n\n  // also needs to update it descendants path\n  const descendants = findDescendants(items, itemIndex);\n  descendants.forEach((descendantItem) => {\n    updateFn[items.indexOf(descendantItem)] = {\n      path: { $splice: [[0, descendantItem.path.indexOf(id), ...newPath]] },\n    };\n  });\n  return updateFn;\n}\n\n/**\n * Decrease the tree item to 1 level depth\n * @param {Array} items The item list\n * @param {Number} itemIndex The position of the item to decrease\n * @return {null|Object}\n */\nexport function decreaseTreeItem(items: Array<{ path: Array<number|string> }>, itemIndex: number): Object|null {\n  const updateFn = {};\n  const item = items[itemIndex];\n  const { id } = item;\n\n  // Can't decrease if it don't have prev sibling\n  const prevSiblingItem = items\n    .filter((siblingItem, index) =>\n      index < itemIndex && siblingItem.path.join('.') === item.path.join('.'),\n    )\n    .pop();\n\n  if (!prevSiblingItem) {\n    return null;\n  }\n\n  const newPath = [...prevSiblingItem.path, prevSiblingItem.id];\n\n  // update drag item path\n  updateFn[itemIndex] = { path: { $set: newPath } };\n\n  // also needs to update it descendants path\n  const descendants = findDescendants(items, itemIndex);\n  descendants.forEach((descendantItem) => {\n    updateFn[items.indexOf(descendantItem)] = {\n      path: { $splice: [[0, descendantItem.path.indexOf(id), ...newPath]] },\n    };\n  });\n  return updateFn;\n}\n\n/**\n * Move an item to a new position\n * @param {Array} items The item list\n * @param {Number} sourceIndex The current position of the item to move\n * @param {Number} targetIndex The new position of the item to move\n * @return {{updateFn: {}, newIndex: number}}\n */\nexport function moveTreeItem(\n  items: Array<{ path: Array<number|string> }>, sourceIndex: number, targetIndex: number,\n): Object|null {\n  let sourceItem = items[sourceIndex];\n  const targetItem = items[targetIndex];\n  const { id: dragId } = sourceItem;\n  let descendants = findDescendants(items, sourceIndex);\n\n  const updateFn = {};\n\n  // update drag item path\n  const newPath = [...targetItem.path];\n  sourceItem = update(sourceItem, { path: { $set: newPath } });\n\n  // update descendants path\n  descendants = descendants.map(descendantItem =>\n    update(descendantItem, {\n      path: {\n        $set: update(descendantItem.path, {\n          $splice: [[0, descendantItem.path.indexOf(dragId), ...newPath]],\n        }),\n      },\n    }),\n  );\n\n  let newIndex = targetIndex;\n  // move up\n  if (sourceIndex > targetIndex) {\n    updateFn.$splice = [\n      // remove it and descendants from the list\n      [sourceIndex, 1 + descendants.length],\n      // insert drag item and it descendants to the new position\n      [targetIndex, 0, sourceItem, ...descendants],\n    ];\n  } else { // move down\n    const hoverDescendants = findDescendants(items, targetIndex);\n    newIndex = (targetIndex + hoverDescendants.length) - descendants.length;\n    updateFn.$splice = [\n      // remove it and descendants from the list\n      [sourceIndex, 1 + descendants.length],\n      // insert drag item and it descendants to the new position\n      [newIndex, 0, sourceItem, ...descendants],\n    ];\n  }\n\n  return { updateFn, newIndex };\n}\n\n/**\n * Add a new item to the bottom of the list\n * @param {Array} items The item list\n * @param {Object} itemData The item data\n * @return {Array}\n */\nexport function add(items: Array<{ path: Array<number|string> }>, itemData: { id: number|string }): Array {\n  const item = { ...itemData, path: [] };\n  return update(items, { $push: [item] });\n}\n\n/**\n * Insert a new item to the list\n * @param {Array} items The item list\n * @param {Number} targetIndex The position to insert into\n * @param {Object} itemData The item data\n * @return {Array}\n */\nexport function insert(items: Array<{ path: Array<number|string> }>,\n  targetIndex: number, itemData: { id: number|string }): Object {\n  const currentItemAtIndex = items[targetIndex];\n  const currentItemDescendants = findDescendants(items, targetIndex);\n  const path = [...currentItemAtIndex.path];\n  const newItem = { ...itemData, path };\n\n  return update(items, { $splice: [[targetIndex + currentItemDescendants.length + 1, 0, newItem]] });\n}\n\n/**\n * Remove an item and it descendants from the list\n * @param {Array} items The item list\n * @param {Number} index The item index\n * @return {Array}\n */\nexport function remove(items: Array<{ path: Array<number|string> }>, index: number): Array {\n  const descendants = findDescendants(items, index);\n\n  return update(items, { $splice: [[index, 1 + descendants.length]] });\n}\n"],"file":"utils.js"}